We also need to make the rest of EAMxx aware of the new process we just added.  Specifically,
we need to register the new process in the physics suite and we need to make the MCT coupler
aware of it.

> Register the new process with physics.

vi $E3SM_ROOT/components/src/physics/register_physics.hpp

> Make the eamxx_pompei_interface header included here.

#ifdef EAMXX_HAS_POMPEI
#include "physics/pompei/eamxx_pompei_process_interface.hpp"
#endif

> Register pompei with the process factory.  Note the use of the pompei class name in the interface file.

#ifdef EAMXX_HAS_POMPEI
  proc_factory.register_product("pompei",&create_atmosphere_process<POMPEI>);
#endif

> Link the pompei library to the coupler interface.

vi $E3SM_ROOT/components/eamxx/src/mct_coupling/CMakeLists.txt

> Add the pompei library to SCREAM_LIBS

set (SCREAM_LIBS
 ...
 pompei
)

> Add pompei to the eamxx set of namelist options.

vi $E3SM_ROOT/components/eamxx/cime_config/namelist_defaults_scream.xml

> Define a new process "pompei" with the appropriate namelist options

<pompei inherit="atm_proc_base">
  <eruption_date type="string" doc="Start date/time in YYYY-MM-DD-SSSSS format for the eruption">${RUN_REFDATE}-${RUN_REFTOD}</eruption_date>
  <plume_radius_in_km type="real" doc="Radius of eruption plume, in km">100</plume_radius_in_km>
</pompei>

> Under "initial conditions" add an initial condition for ash, setting it to 0.0
    <!-- Ash initial condition to 0.0 -->
    <ash               >0.0</ash>
